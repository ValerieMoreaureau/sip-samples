package com.mobius.software.samples.oio.multiplethreads;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

public class ServerMT {
    private static final int INITIAL_PORT = 1236;
    private final AtomicInteger activeConnections = new AtomicInteger(0); // Track active connections

    public static void main(String[] args) {
        ServerMT server = new ServerMT();
        server.startServer();
    }

    public void startServer() {
        ExecutorService executorService = Executors.newCachedThreadPool(); // Using a cached thread pool
        ServerSocket serverSocket = null;
        int port = INITIAL_PORT;

        try {
            while (true) {
                try {
                    serverSocket = new ServerSocket(port);
                    System.out.println("Server started on port " + port + ". Waiting for clients...");
                    break; // If no exception, break the loop
                } catch (IOException e) {
                    // Port is already in use or refused, try the next port
                    System.err.println("Port " + port + " is already in use or refused. Trying the next port.");
                    port++;
                }
            }

            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("New client connected: " + socket);
                activeConnections.incrementAndGet(); // Increment active connections

                // Start a new thread to handle the client
                ClientHandler clientHandler = new ClientHandler(socket);
                executorService.execute(clientHandler); // Execute the client handler in the thread pool
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (serverSocket != null) {
                try {
                    serverSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            executorService.shutdown(); // Shut down the thread pool
        }
    }

    private class ClientHandler extends Thread {
        private final Socket socket;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try (
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {
                String msgFromClient;
                while ((msgFromClient = bufferedReader.readLine()) != null) {
                    System.out.println("Client " + socket + ": " + msgFromClient);

                    // Send server response immediately after receiving client message
                    bufferedWriter.write("Server: MESSAGE RECEIVED\n");
                    bufferedWriter.flush();

                    if (msgFromClient.equalsIgnoreCase("BYE")) {
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                    System.out.println("Client disconnected: " + socket);
                    activeConnections.decrementAndGet(); // Decrement active connections
                } catch (IOException e) {
                    e.printStackTrace();
                }

                // Check if all clients have disconnected
                if (activeConnections.get() == 0) {
                    System.out.println("All clients disconnected. Shutting down the server.");
                    System.exit(0); // Terminate the program
                }
            }
        }
    }
}
