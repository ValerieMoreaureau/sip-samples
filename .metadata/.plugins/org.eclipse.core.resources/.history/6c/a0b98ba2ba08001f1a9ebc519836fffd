package com.mobius.software.samples.oio.mutiplethreads;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.atomic.AtomicInteger; // for generating unique client IDs

public class ServerMT {

  private static final AtomicInteger clientCounter = new AtomicInteger(0);

  public void startServer() {
    ServerSocket serverSocket = null;
    try {
      serverSocket = new ServerSocket(1235);
      System.out.println("Server started. Waiting for clients...");

      while (true) {
        Socket socket = serverSocket.accept();
        String clientId = "Client-" + clientCounter.getAndIncrement();
        System.out.println("New client connected: " + clientId);
        ClientHandler clientHandler = new ClientHandler(socket, clientId);
        clientHandler.start();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      if (serverSocket != null) {
        try {
          serverSocket.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
  }

  private static class ClientHandler extends Thread {
    private final Socket socket;
    private final String clientId;

    public ClientHandler(Socket socket, String clientId) {
      this.socket = socket;
      this.clientId = clientId;
    }

    @Override
    public void run() {
      try (
          BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
          BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {
    	  String msgFromClient;
    	  while ((msgFromClient = bufferedReader.readLine()) != null) {
    	  System.out.println(clientId + ": " + msgFromClient);

    	        // Send server response immediately after receiving client message
    	        bufferedWriter.write("Server: MESSAGE RECEIVED\n");
    	        bufferedWriter.flush();

    	        if (msgFromClient.equalsIgnoreCase("BYE")) {
    	          break;
    	        }
    	      }
    	    } catch (IOException e) {
    	      e.printStackTrace();
    	    } finally {
    	      try {
    	        socket.close();
    	        System.out.println(clientId + " disconnected");
    	      } catch (IOException e) {
    	        e.printStackTrace();
    	      }
    	    } 
    	  }

    	  }
    	  }




