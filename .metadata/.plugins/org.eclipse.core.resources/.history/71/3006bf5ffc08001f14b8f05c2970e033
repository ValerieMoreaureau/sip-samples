package com.mobius.software.samples.oio.multiplethreads.threadsImpl;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

public class ServerMT implements Runnable {
    public void startServer() {
        ExecutorService executorService = Executors.newFixedThreadPool(2); // Assuming 2 clients

        int port = getRandomUnusedPort();
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server started on port: " + port + ". Waiting for clients...");

            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("New client connected: " + socket);

                // Start a new thread to handle the client with synchronization
                ClientHandler clientHandler = new ClientHandler(socket);
                executorService.execute(clientHandler); // Execute the client handler in the thread pool
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            executorService.shutdown(); // Shut down the thread pool
        }
    }

    private static int getRandomUnusedPort() {
        int port = 1235; // Start with the desired port
        while (true) {
            try {
                new ServerSocket(port).close(); // Try to create and close a ServerSocket to check availability
                return port;
            } catch (IOException e) {
                // Port likely in use, try the next one
                port++;
            }
        }
    }

    private static class ClientHandler implements Runnable {
        private final Socket socket;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                 BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {

                String msgFromClient;
                while ((msgFromClient = bufferedReader.readLine()) != null) {
                    System.out.println("Client " + socket + ": " + msgFromClient);

                    // Send server response immediately after receiving client message
                    bufferedWriter.write("Server: MESSAGE RECEIVED\n");
                    bufferedWriter.flush();

                    if (msgFromClient.equalsIgnoreCase("BYE")) {
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                    System.out.println("Client disconnected: " + socket);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}